<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 May 2019 19:20:36 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>腾讯春招面试总结</title>
      <link>http://localhost:1313/post/%E8%85%BE%E8%AE%AF%E6%98%A5%E6%8B%9B%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 05 May 2019 19:20:36 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E8%85%BE%E8%AE%AF%E6%98%A5%E6%8B%9B%E6%80%BB%E7%BB%93/</guid>
      <description>腾讯春招面试总结 3月11日 PCG部门一面（42分钟） 面试问题 确认了投递的基本信息和意向城市 简单的自我介绍（没必要说还没有研究的内容） Linu</description>
    </item>
    
    <item>
      <title>LeetCode二叉树和递归</title>
      <link>http://localhost:1313/post/leetcode%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E9%80%92%E5%BD%92/</link>
      <pubDate>Fri, 05 Apr 2019 20:39:14 +0000</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E9%80%92%E5%BD%92/</guid>
      <description>104. Maximum Depth of Binary Tree 1 2 3 4 5 6 7 8 public class Solution { public int maxDepth(TreeNode root) { if (root == null) { return 0; } return 1 + Math.max(maxDepth(root.left), maxDepth(root.right)); } } 递归截止条件：root == null 递归方程：左右子树遍历 递归范围：从ro</description>
    </item>
    
    <item>
      <title>OJ输入输出</title>
      <link>http://localhost:1313/post/oj%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Wed, 03 Apr 2019 22:28:03 +0000</pubDate>
      
      <guid>http://localhost:1313/post/oj%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>说来真是生气，今天的华为笔试第一题就是不确定长度的输入，之前一直没有碰到过，一紧张被卡了。索性把常见的几种输入输出在这里总结一下，我自己用B</description>
    </item>
    
    <item>
      <title>LeetCode二叉搜索树总结</title>
      <link>http://localhost:1313/post/leetcode%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 02 Apr 2019 15:36:53 +0000</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%80%BB%E7%BB%93/</guid>
      <description>235. Lowest Common Ancestor of a Binary Search Tree 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if (root == null) { return root; } if (p.val &amp;lt; root.val &amp;amp;&amp;amp; q.val &amp;lt; root.val) { return lowestCommonAncestor(root.left, p, q); } if (p.val &amp;gt; root.val &amp;amp;&amp;amp; q.val &amp;gt; root.val) { return lowestCommonAncestor(root.right, p,</description>
    </item>
    
    <item>
      <title>LeetCode递归总结</title>
      <link>http://localhost:1313/post/leetcode%E9%80%92%E5%BD%92%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 01 Apr 2019 22:44:34 +0000</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E9%80%92%E5%BD%92%E6%80%BB%E7%BB%93/</guid>
      <description>257. Binary Tree Paths 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class Solution { public List&amp;lt;String&amp;gt; binaryTreePaths(TreeNode root) { List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(); helper(root, res, &amp;#34;&amp;#34;); return res; } private void helper(TreeNode root, List&amp;lt;String&amp;gt; res, String string) { if (root == null) { return; } if (root.left == null &amp;amp;&amp;amp; root.right == null) { res.add(string +</description>
    </item>
    
    <item>
      <title>春招总结之网易互娱</title>
      <link>http://localhost:1313/post/%E6%98%A5%E6%8B%9B%E6%80%BB%E7%BB%93%E4%B9%8B%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B1/</link>
      <pubDate>Mon, 01 Apr 2019 19:20:36 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%98%A5%E6%8B%9B%E6%80%BB%E7%BB%93%E4%B9%8B%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B1/</guid>
      <description>网易互娱基础平台开发二面记录 之前约了4月1号下午3点的网易互娱视频面试，也是我的第一次视频面试，表现的有点紧张，在此记录回顾一下。 面试主要是</description>
    </item>
    
    <item>
      <title>每周总结6</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%936/</link>
      <pubDate>Mon, 26 Nov 2018 19:58:07 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%936/</guid>
      <description>Array and Strings easy系列题 Remove Duplicates from Sorted Array(首先想到放到set里面；然后想到自己写的需要判断是否重复，重复了几个；后面想到由于是有序的，判断发生</description>
    </item>
    
    <item>
      <title>每周总结5</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%935/</link>
      <pubDate>Mon, 26 Nov 2018 19:48:47 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%935/</guid>
      <description>Sorting and Searching easy系列题 Merge Sorted Array(这个问题只真是火，链表里面有，归并排序里有，这边也有，不过这次的版本是不需要另建数据的版本，也算是有一</description>
    </item>
    
    <item>
      <title>每周总结4</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%934/</link>
      <pubDate>Tue, 30 Oct 2018 20:36:42 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%934/</guid>
      <description>ListNode-easy系列题 Delete Node in a Linked List(node.val = node.next.val; node.next = node.next.next;连接跳过即可) Remove Nth Node From End of List(要删除尾巴指定位置的节</description>
    </item>
    
    <item>
      <title>每周总结3</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%933/</link>
      <pubDate>Sun, 21 Oct 2018 10:15:34 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%933/</guid>
      <description>动态规划专题，总结一下dp使用的特点 DP-easy系列题 Climbing Stairs（走一步还是走二步，考虑可能性的话是不是大多是+？sol[i] = sol[i-1] +</description>
    </item>
    
    <item>
      <title>每周总结2</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%932/</link>
      <pubDate>Mon, 15 Oct 2018 11:16:09 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%932/</guid>
      <description>昨天做了到利用HashMap的Sum类型题，感觉其思路挺有意思的，联想到LeetCode第一题Two Sum的高效解法也是用的HashMap，</description>
    </item>
    
    <item>
      <title>每周总结1</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%931/</link>
      <pubDate>Sun, 14 Oct 2018 15:15:09 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%931/</guid>
      <description>之前的每日算法更新结束，文章多了后，hexo编译好慢，而且每天写的话有点浪费时间，算法题还是每天在做，之后改成总结更新类的方式。 Tr</description>
    </item>
    
    <item>
      <title>每日一刷68</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B768/</link>
      <pubDate>Tue, 25 Sep 2018 20:56:33 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B768/</guid>
      <description>简单的5到tree综合总结（104、98、101、102、108） 代码就不贴了，暂时就说说感想： - tree的题基本都是可以用递归做的，可</description>
    </item>
    
    <item>
      <title>每日一刷67</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B767/</link>
      <pubDate>Sun, 09 Sep 2018 19:50:55 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B767/</guid>
      <description>241. Different Ways to Add Parentheses iven a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *. Example 1: 1 2 3 4 5 Input: &amp;#34;2-1-1&amp;#34; Output: [0, 2] Explanation: ((2-1)-1) = 0 (2-(1-1)) = 2 Example 2: 1 2 3 4 5 6 7 8 Input: &amp;#34;2*3-4*5&amp;#34; Output: [-34,</description>
    </item>
    
    <item>
      <title>每日一刷66</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B766/</link>
      <pubDate>Wed, 05 Sep 2018 15:40:57 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B766/</guid>
      <description>138. Copy List with Random Pointer A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null. Return a deep copy of the list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32</description>
    </item>
    
    <item>
      <title>每日一刷65</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B765/</link>
      <pubDate>Tue, 04 Sep 2018 16:25:30 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B765/</guid>
      <description>23. Merge k Sorted Lists Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity. Example: 1 2 3 4 5 6 7 Input: [ 1-&amp;gt;4-&amp;gt;5, 1-&amp;gt;3-&amp;gt;4, 2-&amp;gt;6 ] Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32</description>
    </item>
    
    <item>
      <title>每日一刷64</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B764/</link>
      <pubDate>Fri, 31 Aug 2018 15:40:10 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B764/</guid>
      <description>148. Sort List Sort a linked list in O(n log n) time using constant space complexity. Example 1: 1 2 Input: 4-&amp;gt;2-&amp;gt;1-&amp;gt;3 Output: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4 Example 2: 1 2 Input: -1-&amp;gt;5-&amp;gt;3-&amp;gt;4-&amp;gt;0 Output: -1-&amp;gt;0-&amp;gt;3-&amp;gt;4-&amp;gt;5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description>
    </item>
    
    <item>
      <title>每日一刷63</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B763/</link>
      <pubDate>Thu, 30 Aug 2018 21:35:10 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B763/</guid>
      <description>61. Rotate List Given a linked list, rotate the list to the right by k places, where k is non-negative. Example 1: 1 2 3 4 5 Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, k = 2 Output: 4-&amp;gt;5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;NULL Explanation: rotate 1 steps to the right: 5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;NULL rotate 2 steps to the right: 4-&amp;gt;5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;NULL Example 2: 1 2 3 4 5 6 7 Input: 0-&amp;gt;1-&amp;gt;2-&amp;gt;NULL, k = 4 Output: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL Explanation: rotate 1 steps to</description>
    </item>
    
    <item>
      <title>每日一刷62</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B762/</link>
      <pubDate>Wed, 29 Aug 2018 19:52:59 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B762/</guid>
      <description>160. Intersection of Two Linked Lists Write a program to find the node at which the intersection of two singly linked lists begins. For example, the following two linked lists: 1 2 3 4 5 A: a1 → a2 ↘ c1 → c2 → c3 ↗ B: b1 → b2 → b3 begin to intersect at node c1. Notes: * If the two linked lists have no intersection at all,</description>
    </item>
    
    <item>
      <title>每日一刷61</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B761/</link>
      <pubDate>Wed, 29 Aug 2018 16:34:31 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B761/</guid>
      <description>92. Reverse Linked List II Reverse a linked list from position m to n. Do it in one-pass. Note: 1 ≤ m ≤ n ≤ length of list. Example: 1 2 Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, m = 2, n = 4 Output: 1-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;5-&amp;gt;NULL 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public ListNode reverseBetween(ListNode head,</description>
    </item>
    
    <item>
      <title>每日一刷60</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B760/</link>
      <pubDate>Tue, 28 Aug 2018 19:54:08 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B760/</guid>
      <description>328. Odd Even Linked List Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes. You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity. Example 1: 1 2 Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 1-&amp;gt;3-&amp;gt;5-&amp;gt;2-&amp;gt;4-&amp;gt;NULL Example 2: 1 2 Input:</description>
    </item>
    
    <item>
      <title>每日一刷59</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B759/</link>
      <pubDate>Sat, 25 Aug 2018 15:55:37 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B759/</guid>
      <description>445. Add Two Numbers II You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Follow up: What if you cannot modify the input lists? In</description>
    </item>
    
    <item>
      <title>每日一刷58</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B758/</link>
      <pubDate>Sat, 25 Aug 2018 14:45:50 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B758/</guid>
      <description>2. Add Two Numbers You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Example: 1 2 3 Input: (2 -&amp;gt; 4 -&amp;gt; 3) +</description>
    </item>
    
    <item>
      <title>每日一刷57</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B757/</link>
      <pubDate>Fri, 24 Aug 2018 14:41:22 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B757/</guid>
      <description>142. Linked List Cycle II Given a linked list, return the node where the cycle begins. If there is no cycle, return null. Note: Do not modify the linked list. Follow up: Can you solve it without using extra space? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class Solution { public ListNode detectCycle(ListNode head) { ListNode fast</description>
    </item>
    
    <item>
      <title>每日一刷56</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B756/</link>
      <pubDate>Fri, 24 Aug 2018 14:40:18 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B756/</guid>
      <description>141. Linked List Cycle Given a linked list, determine if it has a cycle in it. Follow up: Can you solve it without using extra space? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class Solution { public ListNode detectCycle(ListNode head) { ListNode fast = head, slow = head; while(fast!= null &amp;amp;&amp;amp; fast.next!=null){ fast = fast.next.next; slow =</description>
    </item>
    
    <item>
      <title>每日一刷55</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B755/</link>
      <pubDate>Thu, 23 Aug 2018 19:52:03 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B755/</guid>
      <description>234. Palindrome Linked List Given a singly linked list, determine if it is a palindrome. Example 1: 1 2 Input: 1-&amp;gt;2 Output: false Example 2: 1 2 Input: 1-&amp;gt;2-&amp;gt;2-&amp;gt;1 Output: true Follow up: Could you do it in O(n) time and O(1) space? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class Solution { public boolean isPalindrome(ListNode head)</description>
    </item>
    
    <item>
      <title>每日一刷54</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B754/</link>
      <pubDate>Thu, 23 Aug 2018 19:48:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B754/</guid>
      <description>21. Merge Two Sorted Lists Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists. Example: 1 2 Input: 1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4 Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29</description>
    </item>
    
    <item>
      <title>每日一刷53</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B753/</link>
      <pubDate>Wed, 22 Aug 2018 20:36:16 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B753/</guid>
      <description>206. Reverse Linked List Reverse a singly linked list. Example: 1 2 Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both? 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public ListNode reverseList(ListNode head) { ListNode newhead = null; ListNode tempnode = null; while(head!= null){ tempnode = head; head = head.next; tempnode.next</description>
    </item>
    
    <item>
      <title>每日一刷52</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B752/</link>
      <pubDate>Sun, 19 Aug 2018 20:24:31 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B752/</guid>
      <description>19. Remove Nth Node From End of List Given a linked list, remove the n-th node from the end of list and return its head. Example: Given linked list: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, and n = 2. After removing the second node from the end, the linked list becomes 1-&amp;gt;2-&amp;gt;3-&amp;gt;5. Note: Given n will always be valid. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>每日一刷51</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B751/</link>
      <pubDate>Sun, 19 Aug 2018 20:20:20 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B751/</guid>
      <description>237. Delete Node in a Linked List Write a function to delete a node (except the tail) in a singly linked list, given only access to that node. Given linked list &amp;ndash; head = [4,5,1,9], which looks like following: 4 -&amp;gt; 5 -&amp;gt; 1 -&amp;gt; 9 Example 1: 1 2 3 4 Input: head = [4,5,1,9], node = 5 Output: [4,1,9] Explanation: You are given the second node with value</description>
    </item>
    
    <item>
      <title>每日一刷50</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B750/</link>
      <pubDate>Sat, 18 Aug 2018 19:10:33 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B750/</guid>
      <description>287. Find the Duplicate Number Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one. Example 1: 1 2 Input: [1,3,4,2,2] Output: 2 Example 2: 1 2 Input: [3,1,3,4,2] Output: 3 Note: * You must not modify the array (assume the</description>
    </item>
    
    <item>
      <title>每日一刷49</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B749/</link>
      <pubDate>Fri, 17 Aug 2018 13:26:20 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B749/</guid>
      <description>213. House Robber II You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the</description>
    </item>
    
    <item>
      <title>每日一刷48</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B748/</link>
      <pubDate>Thu, 16 Aug 2018 16:19:05 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B748/</guid>
      <description>647. Palindromic Substrings Given a string, your task is to count how many palindromic substrings in this string. The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters. Example 1: 1 2 3 Input: &amp;#34;abc&amp;#34; Output: 3 Explanation: Three palindromic strings: &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;. Example 2: 1 2 3 Input: &amp;#34;aaa&amp;#34; Output: 6 Explanation: Six palindromic strings: &amp;#34;a&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;a&amp;#34;,</description>
    </item>
    
    <item>
      <title>每日一刷47</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B747/</link>
      <pubDate>Thu, 16 Aug 2018 11:20:04 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B747/</guid>
      <description>682. Baseball Game ou&amp;rsquo;re now a baseball game point recorder. Given a list of strings, each string can be one of the 4 following types: Integer (one round&amp;rsquo;s score): Directly represents the number of points you get in this round. * &amp;ldquo;+&amp;rdquo; (one round&amp;rsquo;s score): Represents that the points you get in this round are the sum of the last two valid round&amp;rsquo;s points. * &amp;ldquo;D&amp;rdquo; (one round&amp;rsquo;s score): Represents</description>
    </item>
    
    <item>
      <title>每日一刷46</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B746/</link>
      <pubDate>Thu, 16 Aug 2018 10:36:54 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B746/</guid>
      <description>20. Valid Parentheses Given a string containing just the characters &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;, determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Note that an empty string is also considered valid. Example 1: 1 2 Input: &amp;#34;()&amp;#34; Output: true Example 2: 1</description>
    </item>
    
    <item>
      <title>每日一刷45</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B745/</link>
      <pubDate>Wed, 15 Aug 2018 21:36:15 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B745/</guid>
      <description>84. Largest Rectangle in Histogram Given n non-negative integers representing the histogram&amp;rsquo;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram. Example: 1 2 Input: [2,1,5,6,2,3] Output: 10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public int largestRectangleArea(int[] height) { int len = height.length; Stack&amp;lt;Integer&amp;gt;</description>
    </item>
    
    <item>
      <title>每日一刷44</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B744/</link>
      <pubDate>Wed, 15 Aug 2018 16:33:59 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B744/</guid>
      <description>64. Minimum Path Sum Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path. Note: You can only move either down or right at any point in time. Example: 1 2 3 4 5 6 7 8 Input: [ [1,3,1], [1,5,1], [4,2,1] ] Output: 7 Explanation: Because the path 1→</description>
    </item>
    
    <item>
      <title>深入理解Java虚拟机-Chapter11</title>
      <link>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter11/</link>
      <pubDate>Wed, 15 Aug 2018 10:41:50 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter11/</guid>
      <description>晚期（运行期）优化概述 Java程序在运行的期间，可能会有某个方法或者代码块的运行特别频繁时，就会把这些代码认定为“热点代码”。为了提高热点代</description>
    </item>
    
    <item>
      <title>深入理解Java虚拟机-Chapter10</title>
      <link>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter10/</link>
      <pubDate>Wed, 15 Aug 2018 10:10:44 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter10/</guid>
      <description>早期（编译期）优化概述 JVM的编译器可以分为三个编译器： 前端编译器：把.java转变为.class的过程。如Sun的Javac、Eclips</description>
    </item>
    
    <item>
      <title>每日一刷43</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B743/</link>
      <pubDate>Tue, 14 Aug 2018 19:10:22 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B743/</guid>
      <description>72. Edit Distance Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2. You have the following 3 operations permitted on a word: * Insert a character * Delete a character * Replace a character Example 1: 1 2 3 4 5 6 Input: word1 = &amp;#34;horse&amp;#34;, word2 = &amp;#34;ros&amp;#34; Output: 3 Explanation: horse -&amp;gt; rorse (replace &amp;#39;h&amp;#39; with &amp;#39;r&amp;#39;) rorse -&amp;gt;</description>
    </item>
    
    <item>
      <title>每日一刷42</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B742/</link>
      <pubDate>Tue, 14 Aug 2018 15:53:59 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B742/</guid>
      <description>42. Trapping Rain Water Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image! Example: 1 2 Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 1 2 3 4</description>
    </item>
    
    <item>
      <title>每日一刷41</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B741/</link>
      <pubDate>Tue, 14 Aug 2018 14:35:31 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B741/</guid>
      <description>32. Longest Valid Parentheses Given a string containing just the characters &amp;lsquo;(&amp;rsquo; and &amp;lsquo;)&amp;rsquo;, find the length of the longest valid (well-formed) parentheses substring. Example 1: 1 2 3 Input: &amp;#34;(()&amp;#34; Output: 2 Explanation: The longest valid parentheses substring is &amp;#34;()&amp;#34; Example 2: 1 2 3 Input: &amp;#34;)()())&amp;#34; Output: 4 Explanation: The longest valid parentheses substring is &amp;#34;()()&amp;#34; 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title>每日一刷40</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B740/</link>
      <pubDate>Sat, 11 Aug 2018 17:28:46 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B740/</guid>
      <description>Combination Sum Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target. The same repeated number may be chosen from candidates unlimited number of times. Note: All numbers (including target) will be positive integers. The solution set must not contain duplicate combinations. Example 1: 1 2 3 4 5 6 Input: candidates =</description>
    </item>
    
    <item>
      <title>每日一刷39</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B739/</link>
      <pubDate>Fri, 10 Aug 2018 16:34:19 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B739/</guid>
      <description>Container With Most Water Given n non-negative integers a1, a2, &amp;hellip;, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water. Note: You may not slant the container and n is</description>
    </item>
    
    <item>
      <title>每日一刷38</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B738/</link>
      <pubDate>Fri, 10 Aug 2018 15:42:24 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B738/</guid>
      <description>Best Time to Buy and Sell Stock with Transaction Fee Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not buy more than 1 share</description>
    </item>
    
    <item>
      <title>每日一刷37</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B737/</link>
      <pubDate>Fri, 03 Aug 2018 10:53:33 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B737/</guid>
      <description>Coin Change 2 You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin. Note: You can assume that 0 &amp;lt;= amount &amp;lt;= 5000 1 &amp;lt;= coin &amp;lt;= 5000 the number of coins is less than 500 the answer is guaranteed</description>
    </item>
    
    <item>
      <title>深入理解Java虚拟机-Chapter8</title>
      <link>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter8/</link>
      <pubDate>Thu, 02 Aug 2018 11:13:24 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter8/</guid>
      <description>虚拟机字节码执行引擎 代码编译的结果是从本地机器码变成字节码，是存储格式发展的一小步，却是编程语言发展的一大步。 运行时栈帧结构 栈帧(Sta</description>
    </item>
    
    <item>
      <title>每日一刷36</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B736/</link>
      <pubDate>Wed, 01 Aug 2018 20:57:42 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B736/</guid>
      <description>Unique Paths II A robot is located at the top-left corner of a m x n grid (marked &amp;lsquo;Start&amp;rsquo; in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &amp;lsquo;Finish&amp;rsquo; in the diagram below). Now consider if some obstacles are added to the grids. How many unique paths would</description>
    </item>
    
    <item>
      <title>深入理解Java虚拟机-Chapter13</title>
      <link>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter13/</link>
      <pubDate>Wed, 01 Aug 2018 10:36:29 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter13/</guid>
      <description>线程安全与锁优化 首先需要保证正确性，然后在此基础上实现高效 概述 「面向过程」的编程思想：站在计算机的角度去抽象问题和解决问题，把数据和过</description>
    </item>
    
    <item>
      <title>每日一刷35</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B735/</link>
      <pubDate>Tue, 31 Jul 2018 20:56:18 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B735/</guid>
      <description>Best Time to Buy and Sell Stock IV Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete at most k transactions. Note: You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again). Example 1: 1 2 3</description>
    </item>
    
    <item>
      <title>深入理解Java虚拟机-Chapter2</title>
      <link>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter2/</link>
      <pubDate>Tue, 31 Jul 2018 10:30:16 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter2/</guid>
      <description>Java内存区域与内存溢出异常 java与c++之间有一堵由内存动态分配和垃圾收集技术所围城的‘高墙’，墙外的人想进去。墙里面的人想出来 运行时</description>
    </item>
    
    <item>
      <title>每日一刷34</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B734/</link>
      <pubDate>Mon, 30 Jul 2018 21:02:35 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B734/</guid>
      <description>Best Time to Buy and Sell Stock III Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete at most two transactions. Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). Example 1: 1 2 3</description>
    </item>
    
    <item>
      <title>深入理解Java虚拟机-Chapter12</title>
      <link>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter12/</link>
      <pubDate>Sun, 29 Jul 2018 15:07:05 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter12/</guid>
      <description>Java内存模型和线程 并发处理的广泛应用是人类“压榨”计算机运行能力的最有利武器 为啥需要并发？ 计算机的运行速度和其他存储和通信子系统差距太</description>
    </item>
    
    <item>
      <title>每日一刷33</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B733/</link>
      <pubDate>Fri, 27 Jul 2018 19:56:22 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B733/</guid>
      <description>Find Peak Element A peak element is an element that is greater than its neighbors. Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index. The array may contain multiple peaks, in that case return the index to any one of the peaks is fine. You may imagine that nums[-1] = nums[n] = -∞. Example 1: 1 2 3 Input: nums</description>
    </item>
    
    <item>
      <title>深入理解Java虚拟机-Chapter6</title>
      <link>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter6/</link>
      <pubDate>Fri, 27 Jul 2018 10:00:44 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter6/</guid>
      <description>“代码编译的结果从本地机器码转变为字节码，是存储格式发展的一小步，却是编程语言发展的一大步。” 类文件结构 啥是无关性？ JVM不仅具有平台无关性</description>
    </item>
    
    <item>
      <title>每日一刷32</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B732/</link>
      <pubDate>Wed, 25 Jul 2018 19:49:26 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B732/</guid>
      <description>Kth Largest Element in an Array Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element. Example 1: 1 2 Input: [3,2,1,5,6,4] and k = 2 Output: 5 Example 2: 1 2 Input: [3,2,3,1,2,4,5,5,6] and k = 4 Output: 4 Note: You may assume k is always valid, 1 ≤ k ≤ array&amp;rsquo;s length.</description>
    </item>
    
    <item>
      <title>每日一刷31</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B731/</link>
      <pubDate>Tue, 24 Jul 2018 21:34:24 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B731/</guid>
      <description>Top K Frequent Elements Given a non-empty array of integers, return the k most frequent elements. 1 2 For example, Given [1,1,1,2,2,3] and k = 2, return [1,2]. Note: You may assume k is always valid, 1 ≤ k ≤ number of unique elements. Your algorithm&amp;rsquo;s time complexity must be better than O(n log n), where n is the array&amp;rsquo;s size. 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>每日一刷30</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B730/</link>
      <pubDate>Mon, 23 Jul 2018 20:05:34 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B730/</guid>
      <description>Sort Colors Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue. Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively. Note: You are not suppose to use the library&amp;rsquo;s sort function for this problem. Example: 1</description>
    </item>
    
    <item>
      <title>每日一刷29</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B729/</link>
      <pubDate>Sun, 22 Jul 2018 19:39:49 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B729/</guid>
      <description>Merge Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array. Note: The number of elements initialized in nums1 and nums2 are m and n respectively. You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. Example: 1 2 3 4 5 Input: nums1 = [1,2,3,0,0,0], m = 3 nums2</description>
    </item>
    
    <item>
      <title>深入理解Java虚拟机-Chapter7</title>
      <link>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter7/</link>
      <pubDate>Sat, 21 Jul 2018 21:58:23 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter7/</guid>
      <description>虚拟机类加载机制 概述 虚拟机的类加载机制：虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接</description>
    </item>
    
    <item>
      <title>每日一刷28</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B728/</link>
      <pubDate>Sat, 21 Jul 2018 15:02:36 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B728/</guid>
      <description>今天做了一道二分查找的简单题，发现二分虽然原理简单，但是有不少坑，在此记录一下，先看题目： First Bad Version You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of</description>
    </item>
    
    <item>
      <title>每日一刷27</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B727/</link>
      <pubDate>Fri, 20 Jul 2018 20:38:14 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B727/</guid>
      <description>Gas Station There are N gas stations along a circular route, where the amount of gas at station i is gas[i]. You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations. Return the starting gas station&amp;rsquo;s index if you can travel</description>
    </item>
    
    <item>
      <title>每日一刷26</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B726/</link>
      <pubDate>Thu, 19 Jul 2018 20:37:47 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B726/</guid>
      <description>做了一道贪心的题，一开始用动态规划的思想做，感觉走了弯路，一般能用贪心解决的题都可以用复杂一点的DP来做，我就是做了这个复杂的DP。 Jump Game II</description>
    </item>
    
    <item>
      <title>深入理解Java虚拟机-Chapter3</title>
      <link>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter3/</link>
      <pubDate>Thu, 19 Jul 2018 11:15:08 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-chapter3/</guid>
      <description>垃圾收集器与内存分配策略 主要思考的问题: 标记-那些内存(那些死,那些活着)需要回收? 什么时候回收? 如何回收? 内存部分分类 线程独有：程序计数器</description>
    </item>
    
    <item>
      <title>每日一刷25</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B725/</link>
      <pubDate>Wed, 18 Jul 2018 20:57:27 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B725/</guid>
      <description>Frog Jump A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water. Given a list of stones&amp;rsquo; positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone.</description>
    </item>
    
    <item>
      <title>每日一刷24</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B724/</link>
      <pubDate>Tue, 17 Jul 2018 15:12:04 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B724/</guid>
      <description>Maximum Length of Repeated Subarray Given two integer arrays A and B, return the maximum length of an subarray that appears in both arrays. Example 1: 1 2 3 4 Input: A: [1,2,3,2,1] B: [3,2,1,4,7] Output: 3 Explanation: The repeated subarray with maximum length is [3, 2, 1]. Note: 1. 1&amp;lt;= len(A), len(B) &amp;lt;= 1000 2. 0&amp;lt;= A[i], B[i] &amp;lt; 100 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>每日一刷23</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B723/</link>
      <pubDate>Mon, 16 Jul 2018 16:28:27 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B723/</guid>
      <description>这道题和昨天的一样，用的是带备忘录的自顶向下的动态规划解法，这类题目一般比较难理解。 Burst Balloons Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to</description>
    </item>
    
    <item>
      <title>每日一刷22</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B722/</link>
      <pubDate>Sun, 15 Jul 2018 15:23:11 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B722/</guid>
      <description>Best Time to Buy and Sell Stock with Cooldown Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions: You may not engage in multiple transactions at</description>
    </item>
    
    <item>
      <title>每日一刷21</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B721/</link>
      <pubDate>Sat, 14 Jul 2018 12:48:02 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B721/</guid>
      <description>真的是做的欲仙欲死，估计做了有2个小时。 Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences. Note: The same word in the dictionary may be reused multiple times in the</description>
    </item>
    
    <item>
      <title>每日一刷20</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B720/</link>
      <pubDate>Sat, 14 Jul 2018 12:47:54 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B720/</guid>
      <description>Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words. Note: The same word in the dictionary may be reused multiple times in the segmentation. You may assume the dictionary does not contain duplicate words. Example 1: 1 2 3 Input: s = &amp;#34;leetcode&amp;#34;, wordDict = [&amp;#34;leet&amp;#34;, &amp;#34;code&amp;#34;] Output:</description>
    </item>
    
    <item>
      <title>每日一刷19</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B719/</link>
      <pubDate>Thu, 12 Jul 2018 20:44:48 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B719/</guid>
      <description>Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, &amp;hellip;) which sum to n. Example 1: 1 2 3 Input: n = 12 Output: 3 Explanation: 12 = 4 + 4 + 4. Example 2: 1 2 3 Input: n = 13 Output: 2 Explanation: 13 = 4 + 9. 1 2 3 4 5 6 7 8 9 10</description>
    </item>
    
    <item>
      <title>每日一刷18</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B718/</link>
      <pubDate>Wed, 11 Jul 2018 20:54:47 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B718/</guid>
      <description>心累，这道题其实用到的思想之前都有用到过，这次一结合再加一点创新就做了很久没做出来。 A message containing letters from A-Z is being encoded to numbers using the following mapping: 1 2 3 4 &amp;#39;A&amp;#39; -&amp;gt; 1 &amp;#39;B&amp;#39; -&amp;gt; 2 ... &amp;#39;Z&amp;#39; -&amp;gt;</description>
    </item>
    
    <item>
      <title>JVM框架概览</title>
      <link>http://localhost:1313/post/jvm%E6%A1%86%E6%9E%B6%E6%A6%82%E8%A7%88/</link>
      <pubDate>Wed, 11 Jul 2018 15:49:18 +0000</pubDate>
      
      <guid>http://localhost:1313/post/jvm%E6%A1%86%E6%9E%B6%E6%A6%82%E8%A7%88/</guid>
      <description>之前看JVM的书有点吃力，最近在看《深入分析java web》感觉里面讲JVM的知识虽然简略，但是容易理解，所以准备将看书过程中的几个要点进行</description>
    </item>
    
    <item>
      <title>每日一刷17</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B717/</link>
      <pubDate>Tue, 10 Jul 2018 20:46:54 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B717/</guid>
      <description>Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product. Example 1: 1 2 Input: [2,3,-2,4] Output: 6 Explanation: [2,3] has the largest product 6. Example 2: 1 2 Input: [-2,0,-1] Output: 0 Explanation: The result cannot be 2, because [-2,-1] is not a subarray. 1 2 3 4 5 6 7 8 9 10 11 12 13</description>
    </item>
    
    <item>
      <title>每日一刷16</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B716/</link>
      <pubDate>Mon, 09 Jul 2018 20:59:48 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B716/</guid>
      <description>非常经典的最长上升子序列的题目，现在做起来还是有点吃力的。之后还要再多看几次。 Given an unsorted array of integers, find the length of longest increasing subsequence. Example: 1 2 3 Input: [10,9,2,5,3,7,101,18] Output: 4 Explanation: The longest increasing subsequence is [2,3,7,101], therefore the</description>
    </item>
    
    <item>
      <title>每日一刷15</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B715/</link>
      <pubDate>Sun, 08 Jul 2018 19:16:28 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B715/</guid>
      <description>今天这道比昨天的难了一点。 You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. Example 1: 1 2 3 Input: coins =</description>
    </item>
    
    <item>
      <title>每日一刷14</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B714/</link>
      <pubDate>Sat, 07 Jul 2018 19:42:33 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B714/</guid>
      <description>可喜可贺，终于是第一道完全自己做出来的LeetCode题了，而且花的时间也不多，算法复杂度也可以。看来的确得每天多练练呀。 A robot is located at the top-left corner</description>
    </item>
    
    <item>
      <title>每日一刷13</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B713/</link>
      <pubDate>Fri, 06 Jul 2018 20:44:02 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B713/</guid>
      <description>不管了，先做一波动态规划的题练练思路。 Jump Game Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index. Example 1: 1 2 3 Input: [2,3,1,1,4] Output: true</description>
    </item>
    
    <item>
      <title>每日一刷12</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B712/</link>
      <pubDate>Thu, 05 Jul 2018 20:19:12 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B712/</guid>
      <description>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Example: 1 2 3 Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6. Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle. java public class Solution { public int</description>
    </item>
    
    <item>
      <title>Java JVM学习笔记1</title>
      <link>http://localhost:1313/post/java-jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Thu, 05 Jul 2018 14:18:01 +0000</pubDate>
      
      <guid>http://localhost:1313/post/java-jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
      <description>光看书找不到重点，针对题目来学习一下《深入了理解Java虚拟机》。 以下哪个不属于JVM堆内存中的区域？ Java堆分为：新生代（一般是一个Ed</description>
    </item>
    
    <item>
      <title>每日一刷11</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B711/</link>
      <pubDate>Wed, 04 Jul 2018 16:21:56 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B711/</guid>
      <description>真的是惰怠，16周之后就再也没刷过题了，说好的每日一刷呢？今天不要脸更新下去吧。。。 You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from</description>
    </item>
    
    <item>
      <title>每日一刷10</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B710/</link>
      <pubDate>Tue, 12 Jun 2018 14:23:42 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B710/</guid>
      <description>You are climbing a stair case. It takes n steps to reach to the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? Note: Given n will be a positive integer. Example 1: 1 2 3 4 5 Input: 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1</description>
    </item>
    
    <item>
      <title>每日一刷9</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B79/</link>
      <pubDate>Mon, 11 Jun 2018 10:52:21 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B79/</guid>
      <description>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. Note: For the purpose of this problem, we define empty string as valid palindrome. Example 1: 1 2 Input: &amp;#34;A man, a plan, a canal: Panama&amp;#34; Output: true Example 2: 1 2 Input: &amp;#34;race a car&amp;#34; Output: false 1 2 3 4 5 6 7 8 9 10 11 12 class Solution { public</description>
    </item>
    
    <item>
      <title>每日一刷8</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B78/</link>
      <pubDate>Sun, 10 Jun 2018 15:44:22 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B78/</guid>
      <description>Given two strings s and t , write a function to determine if t is an anagram of s. Example 1: 1 2 Input: s = &amp;#34;anagram&amp;#34;, t = &amp;#34;nagaram&amp;#34; Output: true Example 2: 1 2 Input: s = &amp;#34;rat&amp;#34;, t = &amp;#34;car&amp;#34; Output: false 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description>
    </item>
    
    <item>
      <title>每日一刷7</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B77/</link>
      <pubDate>Sat, 09 Jun 2018 14:44:57 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B77/</guid>
      <description>Given a string, find the first non-repeating character in it and return it&amp;rsquo;s index. If it doesn&amp;rsquo;t exist, return -1. Examples: 1 2 3 4 5 s = &amp;#34;leetcode&amp;#34; return 0. s = &amp;#34;loveleetcode&amp;#34;, return 2. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int firstUniqChar(String s) { HashMap&amp;lt;Character, Integer&amp;gt; map = new LinkedHashMap&amp;lt;Character,</description>
    </item>
    
    <item>
      <title>每日一刷6</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B76/</link>
      <pubDate>Fri, 08 Jun 2018 14:05:18 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B76/</guid>
      <description>Write a function that takes a string as input and returns the string reversed. Example: Given s = &amp;ldquo;hello&amp;rdquo;, return &amp;ldquo;olleh&amp;rdquo;. 1 2 3 4 5 6 7 8 9 10 11 12 class Solution { public String reverseString(String s) { char[] word = s.toCharArray(); int n = s.length(); for(int i=0;i&amp;lt;n/2;i++){ char temp = word[i]; word[i] = word[n-1-i]; word[n-1-i] = temp; } return new String(word); } } jav</description>
    </item>
    
    <item>
      <title>每日一刷5</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B75/</link>
      <pubDate>Thu, 07 Jun 2018 21:10:28 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B75/</guid>
      <description>You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). Note: You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 Given input matrix = [ [1,2,3], [4,5,6], [7,8,9]</description>
    </item>
    
    <item>
      <title>每日一刷4</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B74/</link>
      <pubDate>Wed, 06 Jun 2018 15:30:44 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B74/</guid>
      <description>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: 1. Each row must contain the digits 1-9 without repetition. 2. Each column must contain the digits 1-9 without repetition. 3. Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition. 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title>每日一刷1</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B71/</link>
      <pubDate>Tue, 05 Jun 2018 14:30:31 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B71/</guid>
      <description>记录一下java刷LeetCode的思路，巩固一下基础。 Rotate Array（easy） Given an array, rotate the array to the right by k steps, where k is non-negative. Example 1: &amp;gt;Input: [1,2,3,4,5,6,7] and k = 3 Output: [5,6,7,1,2,3,4] Explanation: rotate 1 steps</description>
    </item>
    
    <item>
      <title>每日一刷2</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B72/</link>
      <pubDate>Tue, 05 Jun 2018 14:30:27 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B72/</guid>
      <description>Intersection of Two Arrays II（easy） Given two arrays, write a function to compute their intersection. Example: Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2]. Note: - Each element in the result should appear as many times as it shows in both arrays. - The result can be in any order. Follow up: - What if the given</description>
    </item>
    
    <item>
      <title>每日一刷3</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B73/</link>
      <pubDate>Tue, 05 Jun 2018 14:30:21 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B73/</guid>
      <description>Plus One(easy) Given a non-empty array of digits representing a non-negative integer, plus one to the integer. The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit. You may assume the integer does not contain any leading zero, except the number 0 itself. Example 1: &amp;gt; Input: [1,2,3] &amp;gt; Output: [1,2,4] &amp;gt; Explanation:</description>
    </item>
    
    <item>
      <title>软技能</title>
      <link>http://localhost:1313/post/%E8%BD%AF%E6%8A%80%E8%83%BD/</link>
      <pubDate>Wed, 30 May 2018 19:27:12 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E8%BD%AF%E6%8A%80%E8%83%BD/</guid>
      <description>哎，写字又丑又慢，准备慢慢的把读书笔记记到博客中来。最近清恰好在网上看到了一本《软技能》的书，大概是讲程序员的职业规划的，自己对此也一直</description>
    </item>
    
    <item>
      <title>Java学习笔记5</title>
      <link>http://localhost:1313/post/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</link>
      <pubDate>Fri, 18 May 2018 20:20:02 +0000</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</guid>
      <description>还是要补充基础知识啊 反射 泛型 简单泛型类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Pair&amp;lt;T&amp;gt; { private T first; private T second; public Pair() { first = null; second = null; } public Pair(T first, T second) { this.first = first; this.second = second; } public T getFirst() {</description>
    </item>
    
    <item>
      <title>Java学习笔记4</title>
      <link>http://localhost:1313/post/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</link>
      <pubDate>Mon, 14 May 2018 20:29:39 +0000</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</guid>
      <description>包 使用包名的主要作用是确保类名的唯一性，而且从编译器的角度来看，嵌套的包之间没有任何的关系 类的导入 1.一个类可以使用所属包中的所有类，以及其</description>
    </item>
    
    <item>
      <title>Spring boot学习笔记8</title>
      <link>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/</link>
      <pubDate>Sun, 13 May 2018 10:02:56 +0000</pubDate>
      
      <guid>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/</guid>
      <description>小知识 1.由于在pc端上修改了host文件，可以将网址sell.com直接解析为127.0.0.1，但是在手机上不能改host，如何访问到p</description>
    </item>
    
    <item>
      <title>Spring boot学习笔记7</title>
      <link>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/</link>
      <pubDate>Tue, 08 May 2018 20:07:37 +0000</pubDate>
      
      <guid>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/</guid>
      <description>今天暂停一下跟着视频学习的进程，好好回顾一下程序的逻辑。 获取yml配置文件里的变量 比如我在yml配置的微信关公众号的信息如下： 1 2 3 wechat: mpAppid: wxf98e335974fbfa76 mpAppSecret:</description>
    </item>
    
    <item>
      <title>Spring boot学习笔记6</title>
      <link>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/</link>
      <pubDate>Mon, 07 May 2018 09:34:29 +0000</pubDate>
      
      <guid>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/</guid>
      <description>周末两天把最硬核的买家端DAO-Service(单元测试)-Controller部分完成了，干货非常多，但是也有很多业务逻辑方面的代码需要再</description>
    </item>
    
    <item>
      <title>Spring boot学习笔记5</title>
      <link>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</link>
      <pubDate>Sun, 06 May 2018 09:51:30 +0000</pubDate>
      
      <guid>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</guid>
      <description>记录在spring boot学习中遇到的知识和难点 小知识 1.lombok的Data,Getter,Setter的区别就是，Data包含（Ge</description>
    </item>
    
    <item>
      <title>Spring boot学习笔记4</title>
      <link>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</link>
      <pubDate>Thu, 03 May 2018 20:07:36 +0000</pubDate>
      
      <guid>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</guid>
      <description>spring中jpa操作createTime对应于数据库的中的create_time,这个是固定的，jpa操作的时候会自动进行名字的转</description>
    </item>
    
    <item>
      <title>Spring boot学习笔记3</title>
      <link>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</link>
      <pubDate>Thu, 03 May 2018 09:30:43 +0000</pubDate>
      
      <guid>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</guid>
      <description>之前按照spring boot的视频依葫芦画瓢，虽然知道了大体框架，但是很多细节方面的问题都被带过了，现在回顾一下。 框架 整个工程可以分为4个模</description>
    </item>
    
    <item>
      <title>Java编写习惯</title>
      <link>http://localhost:1313/post/java%E7%BC%96%E5%86%99%E4%B9%A0%E6%83%AF/</link>
      <pubDate>Wed, 02 May 2018 21:46:24 +0000</pubDate>
      
      <guid>http://localhost:1313/post/java%E7%BC%96%E5%86%99%E4%B9%A0%E6%83%AF/</guid>
      <description>写好单词 写好变量 大小写:变量小写，方法小写，类名大写 长度:单子个字字母的变量只能在3/5内解决 含义:少用temp,it,do等没有意义的词</description>
    </item>
    
    <item>
      <title>Java学习笔记3</title>
      <link>http://localhost:1313/post/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</link>
      <pubDate>Mon, 30 Apr 2018 09:08:55 +0000</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</guid>
      <description>之前在慕课网上学完《Spring Boot进阶之Web进阶》和《2小时学会Spring Boot》中间遇到了不少java语法上的问题，不过当时就</description>
    </item>
    
    <item>
      <title>Spring boot学习笔记2</title>
      <link>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Fri, 27 Apr 2018 16:01:21 +0000</pubDate>
      
      <guid>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</guid>
      <description>慕课网上的《2小时学会Spring Boot》学习结束,后半段主要讲了spring通过jpa操作Mysql数据库的操作，用到了测试软件pos</description>
    </item>
    
    <item>
      <title>Spring boot学习笔记</title>
      <link>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Thu, 26 Apr 2018 11:34:40 +0000</pubDate>
      
      <guid>http://localhost:1313/post/spring-boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
      <description>跟着慕课网上的《2小时学会Spring Boot》学习，发现讲解比较简单，适合像我这样的初学者学习，记录一下每个章节学到的知识点，主要以学习s</description>
    </item>
    
    <item>
      <title>Java学习笔记2</title>
      <link>http://localhost:1313/post/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Wed, 25 Apr 2018 15:42:06 +0000</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</guid>
      <description>这次将书中第三章的其余内容进行扫尾工作，主要是详细介绍数组为主。 数组 之前在做LeetCode的时候，就发现大量涉及到字符串和数组的操作，所</description>
    </item>
    
    <item>
      <title>Java学习笔记1</title>
      <link>http://localhost:1313/post/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Tue, 24 Apr 2018 14:48:13 +0000</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
      <description>正好最近完成了蒋老师的DES课程小作业，也是第一次用Java语言配合Intellij IDEA完成开发，中间遇到了一些问题，当时就在网上找找原</description>
    </item>
    
  </channel>
</rss>