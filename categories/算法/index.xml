<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 05 Apr 2019 20:39:14 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode二叉树和递归</title>
      <link>http://localhost:1313/post/leetcode%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E9%80%92%E5%BD%92/</link>
      <pubDate>Fri, 05 Apr 2019 20:39:14 +0000</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E9%80%92%E5%BD%92/</guid>
      <description>104. Maximum Depth of Binary Tree 1 2 3 4 5 6 7 8 public class Solution { public int maxDepth(TreeNode root) { if (root == null) { return 0; } return 1 + Math.max(maxDepth(root.left), maxDepth(root.right)); } } 递归截止条件：root == null 递归方程：左右子树遍历 递归范围：从ro</description>
    </item>
    
    <item>
      <title>OJ输入输出</title>
      <link>http://localhost:1313/post/oj%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Wed, 03 Apr 2019 22:28:03 +0000</pubDate>
      
      <guid>http://localhost:1313/post/oj%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>说来真是生气，今天的华为笔试第一题就是不确定长度的输入，之前一直没有碰到过，一紧张被卡了。索性把常见的几种输入输出在这里总结一下，我自己用B</description>
    </item>
    
    <item>
      <title>LeetCode二叉搜索树总结</title>
      <link>http://localhost:1313/post/leetcode%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 02 Apr 2019 15:36:53 +0000</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%80%BB%E7%BB%93/</guid>
      <description>235. Lowest Common Ancestor of a Binary Search Tree 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if (root == null) { return root; } if (p.val &amp;lt; root.val &amp;amp;&amp;amp; q.val &amp;lt; root.val) { return lowestCommonAncestor(root.left, p, q); } if (p.val &amp;gt; root.val &amp;amp;&amp;amp; q.val &amp;gt; root.val) { return lowestCommonAncestor(root.right, p,</description>
    </item>
    
    <item>
      <title>LeetCode递归总结</title>
      <link>http://localhost:1313/post/leetcode%E9%80%92%E5%BD%92%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 01 Apr 2019 22:44:34 +0000</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E9%80%92%E5%BD%92%E6%80%BB%E7%BB%93/</guid>
      <description>257. Binary Tree Paths 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class Solution { public List&amp;lt;String&amp;gt; binaryTreePaths(TreeNode root) { List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(); helper(root, res, &amp;#34;&amp;#34;); return res; } private void helper(TreeNode root, List&amp;lt;String&amp;gt; res, String string) { if (root == null) { return; } if (root.left == null &amp;amp;&amp;amp; root.right == null) { res.add(string +</description>
    </item>
    
  </channel>
</rss>